Clean_data = function(df,continuous=FALSE){
rename_col <- function(df ,
patterns ,
format ){
B <- colnames( df )
for(i in 1:length(B)){
col <- B[i]
for( y in 1:length(patterns) ){
if( tolower(patterns[y]) == tolower(B[i])){
if(!B[i]==format){cat("Replace",B[i],"with", format,"\n")}
B[i] <- format
}
}
}
colnames( df ) <-  B
if(length( unique(colnames(df) ) ) != length(colnames( df))){
stop(paste(format,"Column name is duplicated, please use `help(U1_Clean_data)` to view the documentation, only provide one!\n"), call. = FALSE)
}
return(df)
}
# Convert to data frame if it is a data frame
if(is.data.frame(df)){ df = as.data.frame(df) }
df<-rename_col(df,patterns=c("snp","rsid","rsids","snpid","rnpid","rs","variant_id"),format="SNP")
df<-rename_col(df,patterns=c("chr","#chrom","chromosome"),format="chr")
df<-rename_col(df,patterns=c("pos","position","base_pair_location"),format="pos")
df<-rename_col(df,patterns=c("effect_allele","ea","alt", "alts","Tested_Allele","Alternate.Allele"),format="effect_allele")
df<-rename_col(df,patterns=c("other_allele","oa","ref","Reference.Allele","NEA"),format="other_allele")
df<-rename_col(df,patterns=c("beta","b","Effect","LogOR"),format="beta")
df<-rename_col(df,patterns=c("se","sebeta","standard error","standard_error","StdErr","StdErrLogOR"),format="se")
df<-rename_col(df,patterns=c("pval","p","p_value","pvalue"),format="pval")
df<-rename_col(df,patterns=c("z","zscore"),format="z")
df<-rename_col(df,patterns=c("eaf","FREQ", "af_alt", "FREQ1","effect_allele_frequency","Freq_Tested_Allele","Alternate.Allele.Frequency"),format="eaf")
df<-rename_col(df,patterns=c("samplesize","n","sample_size","TotalSampleSize"),format="samplesize")
df<-rename_col(df,patterns=c("ncase","n_cases", "ncases", "n_case"),format="ncase")
df<-rename_col(df,patterns=c("ncontrol","n_controls","ncontrols", "n_control","Ntotal" ),format="ncontrol")
df<-rename_col(df,patterns=c("or","odds ratio","odds_ratio"),format="or")
df<-rename_col(df,patterns=c("gene","nearest_genes"),format="gene")
df<-rename_col(df,patterns=c("info"),format="info")
message('usually. effect_allele = Allele1; other_allele = Allele2. but please check manually. and use df <- dplyr::rename(df, other_allele = Allele2)')
if(!"SNP" %in% colnames( df ) ){
warning("SNP is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide an SNP column! \n")
}else{
ratio = sum(grepl("^rs\\d+$", df$SNP))/length(df$SNP)
if( ratio < 0.5 ){ warning("A large number or all of the SNPs are not in the format rs123456, please use",cli::style_underline(cli::col_br_red("help(U1_add_SNP)")),"to view the documentation, match the SNP column!\n")  }
}
if(!"chr" %in% colnames( df ) | !"pos" %in% colnames( df ) ){
cat("No chr or pos, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide a chr or pos column! Or use",cli::style_underline(cli::col_br_red("help(U1_add_chr_pos)")),"to view the documentation to match chr and pos, it does not affect the analysis if not available \n")
}
if( "pos" %in% colnames(df) ){
df$pos<-as.numeric( df$pos ) }
# beta part
if( "or" %in% colnames( df ) & !"beta" %in% colnames( df ) ){
cat("No beta provided, calculated based on or, formula is beta = log(or) \n")
df$beta<-as.numeric(log(df$or))
}else if("se" %in% colnames( df ) &  "pval" %in% colnames( df ) & !"beta" %in% colnames( df )  ){
cat("No beta provided, calculated based on se and pval, formula is beta = se * sqrt(qchisq(pval,1,lower.tail=F) ) \n")
df$beta<-as.numeric(  df$se * sqrt(qchisq(df$pval,1,lower.tail=F) )         )
}else if(!"beta" %in% colnames( df )){
warning("beta is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide a beta column! \n")
}
# se part
if("beta" %in% colnames( df ) &  "pval" %in% colnames( df ) & !"se" %in% colnames( df )){
cat("No se provided, calculated based on beta and pval, formula is se = beta / sqrt(qchisq(pval,1,lower.tail=F) ) \n")
df$se<-as.numeric(  df$beta / sqrt(qchisq(df$pval,1,lower.tail=F) )         )
}else if(!"se" %in% colnames( df )){
warning("se is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide an se column! \n")
}
if(!"effect_allele" %in% colnames( df ) ){
warning("effect_allele is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide an effect_allele column! \n")
}
if(!"other_allele" %in% colnames( df ) ){
warning("other_allele is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide an other_allele column! \n")
}
if( "pval" %in% colnames(df) ){
if (!is.numeric(df$pval)){
cat("Convert pval to numeric\n")
df$pval<-as.numeric(df$pval) }
}else if(("beta" %in% colnames(df)) & ("se" %in% colnames(df))  & !("pval" %in% colnames(df))   ){
cat("No pval provided, calculated based on beta and se, formula is pval<- 2*pnorm(abs(beta/se),lower.tail=FALSE) \n")
df$beta<-as.numeric(df$beta)
df$se<-as.numeric(df$se)
df$pval<- 2*pnorm(abs(df$beta/df$se),lower.tail=FALSE)
df$pval<-as.numeric(df$pval)
}else if( "z" %in% colnames(df)  & !("pval" %in% colnames(df)) ){
cat("No pval provided, cannot be calculated based on beta and se, calculated based on z, formula is pval<- 2*pnorm(abs(z),lower.tail=FALSE) \n")
df$z<-as.numeric(df$z)
df$pval<- 2*pnorm(abs(df$z),lower.tail=FALSE)
df$pval<-as.numeric(df$pval)
}else if(!("pval" %in% colnames(df))){
warning("pval is very important, please use",cli::style_underline(cli::col_br_red("help(U1_Clean_data)")),"to view the documentation, provide a pval column! \n")
}
# if( !("z" %in% colnames(df)) & ("pval" %in% colnames(df)) ){
#   cat("No z provided, calculated based on pval, formula is z <- sqrt(qchisq(pval,1,lower.tail=F)) \n")
#   df$z<- sqrt(qchisq(pval,1,lower.tail=F))
# }
if(!"Phenotype" %in% colnames(df) ){
df$Phenotype<- readline("Enter phenotype name, e.g., Body Mass Index, then press Enter:")
}
if(!"id" %in% colnames(df) ){
df$id<- readline("Create a unique ID for your phenotype, e.g., Oneclick-0001, then press Enter:")
}
if(!continuous){
if( (!"ncase" %in% colnames(df)) |  (!"ncontrol" %in% colnames(df))       ){
YES_NO<- yesno::yesno2("Is it case-control data, e.g., disease with cases and controls? Select 1 for yes, 2 for no", yes = "Yes", no = "No")
if( (!"ncase" %in% colnames(df)) & YES_NO    ){df$ncase<- as.numeric( readline("Enter number of cases, e.g., 4560, then press Enter:")  )}
if( (!"ncontrol" %in% colnames(df)) & YES_NO  ){ df$ncontrol<- as.numeric( readline("Enter number of controls, e.g., 78200, then press Enter:")  )}
}
}
if(("ncase" %in% colnames(df)) & ("ncontrol" %in% colnames(df)) & !"samplesize" %in% colnames(df) ){
cat("No samplesize provided, calculated based on ncase and ncontrol, formula is samplesize<- ncase + ncontrol \n")
df$samplesize<- as.numeric(df$ncase + df$ncontrol  )
}else if( !"samplesize" %in% colnames(df) ){
df$samplesize<- as.numeric( readline("Enter total sample size, e.g., 478000, then press Enter:")  )
}
return(df)
}
prepare_Munge<-function(){
options(timeout = 1200)
if (!require("BiocManager")) install.packages("BiocManager")
# https://www.bioconductor.org/about/mirrors/
options(BioC_mirror="https://mirrors.westlake.edu.cn/bioconductor")
if (!require("MungeSumstats")){
BiocManager::install("MungeSumstats")
}
# 38 reference group
if (!require("SNPlocs.Hsapiens.dbSNP155.GRCh38")) {
message( "The first installation of the SNPlocs.Hsapiens.dbSNP155.GRCh38 package takes a long time" )
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh38")
}
if (!require("BSgenome.Hsapiens.NCBI.GRCh38")){
message( "The first installation of the BSgenome.Hsapiens.NCBI.GRCh38 package takes a long time" )
BiocManager::install("BSgenome.Hsapiens.NCBI.GRCh38") }
# 37 reference group
if (!require("SNPlocs.Hsapiens.dbSNP155.GRCh37")){
message( "The first installation of the SNPlocs.Hsapiens.dbSNP155.GRCh37 package takes a long time" )
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
}
if (!require("BSgenome.Hsapiens.1000genomes.hs37d5")){
message( "The first installation of the BSgenome.Hsapiens.1000genomes.hs37d5 package takes a long time" )
BiocManager::install("BSgenome.Hsapiens.1000genomes.hs37d5")
}
options(timeout = 60)
library(MungeSumstats)
}
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data_exp(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
View(top_insomnia_exp_both_sexes_S4)
View(top_insomnia_exp_both_sexes_S4)
sex_combined_IVs <- U2_extract_instruments(top_insomnia_exp_both_sexes_S4,
p = 5e-08,
clump = "online",
r2 = 0.001,
kb = 10000,
max_retries = 3,
pop = "EUR")
View(sex_combined_IVs)
sex_combined_IVs$ncontrol.exposure[ which(sex_combined_IVs$id.exposure == "insomni_both_sexes" ) ]  <- 1771286
sex_combined_IVs$samplesize.exposure[ which(sex_combined_IVs$id.exposure == "insomni_both_sexes" ) ]  <- 2365010
View(sex_combined_IVs)
sex_combined_IVs$ncontrol.exposure[sex_combined_IVs$id.exposure == "insomni_both_sexes"] <- 1771286
sex_combined_IVs$samplesize.exposure[sex_combined_IVs$id.exposure == "insomni_both_sexes"] <- 2365010
unique(sex_combined_IVs$id.exposure)
# Update the ncontrol.exposure and samplesize.exposure for "insomni_both_sexes"
sex_combined_IVs$ncontrol.exposure[sex_combined_IVs$id.exposure == "insomni_both_sexes"] <- 1771286
sex_combined_IVs$samplesize.exposure[sex_combined_IVs$id.exposure == "insomni_both_sexes"] <- 2365010
head(sex_combined_IVs)
sum(sex_combined_IVs$id.exposure == "insomnia_both_sexes")
sex_combined_IVs$ncontrol.exposure[sex_combined_IVs$id.exposure == "insomnia_both_sexes"] <- 1771286
sex_combined_IVs$samplesize.exposure[sex_combined_IVs$id.exposure == "insomnia_both_sexes"] <- 2365010
View(sex_combined_IVs)
sex_combined_IVs <- U2_extract_instruments(top_insomnia_exp_both_sexes_S4,
p = 5e-08,
clump = "online",
r2 = 0.001,
kb = 10000,
max_retries = 3,
pop = "EUR")
View(sex_combined_IVs)
sex_combined_IVs$ncontrol.exposure[sex_combined_IVs$id.exposure == "insomnia_both_sexes"] <- 1771286
sex_combined_IVs$samplesize.exposure[sex_combined_IVs$id.exposure == "insomnia_both_sexes"] <- 2365010
write_parquet(sex_combined_IVs, "C:/Users/hh24668/OneDrive - University of Bristol/Documents/sex_combined_IVs.parquet")
View(sex_combined_IVs)
insomnia_exp_male_S10 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_male_S10.xlsx")
insomnia_exp_male_S10 <- U1_maf2eaf(insomnia_exp_male_S10)
View(insomnia_exp_male_S10)
insomnia_exp_male_S10 <- insomnia_exp_male_S10[insomnia_exp_male_S10$isTopSNPs == 1, ]
insomnia_exp_male_S10 <- insomnia_exp_male_S10[insomnia_exp_male_S10$isTopSNPs == 1, ]
insomnia_exp_male_S10 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_male_S10.xlsx")
insomnia_exp_male_S10 <- U1_maf2eaf(insomnia_exp_male_S10)
top_insomnia_exp_male_S10 <- insomnia_exp_male_S10[insomnia_exp_male_S10$isTopSNPs == 1, ]
View(top_insomnia_exp_male_S10)
top_insomnia_exp_male_S10 <- dplyr::rename(top_insomnia_exp_male_S10, effect_allele = Allele1)
top_insomnia_exp_male_S10 <- dplyr::rename(top_insomnia_exp_male_S10, other_allele = Allele2)
top_insomnia_exp_male_S10 <- U1_Clean_data_exp(top_insomnia_exp_male_S10, continuous = FALSE, save = FALSE)
View(top_insomnia_exp_male_S10)
maleIVs <- U2_extract_instruments(top_insomnia_exp_male_S10,
p = 5e-08,
clump = "online",
r2 = 0.001,
kb = 10000,
max_retries = 3,
pop = "EUR")
View(maleIVs)
write_parquet(maleIVs, "C:/Users/hh24668/OneDrive - University of Bristol/Documents/maleIVs.parquet")
View(maleIVs)
maleIVs_origin <- read_parquet("/user/home/hh24668/work/sleep_femrepro/tsmr_insomnia_fem/female/gwas/maleIVs_origin.parquet")
maleIVs_origin <- read_parquet("/user/home/hh24668/work/sleep_femrepro/tsmr_insomnia_fem/female/gwas/maleIVs_origin.parquet")
maleIVs_origin <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/maleIVs_origin.parquet")
View(maleIVs_origin)
head(maleIVs_origin)
View(maleIVs)
View(maleIVs)
View(sex_combined_IVs)
insomnia_exp_female_S12 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_female_S12.xlsx")
insomnia_exp_female_S12 <- U1_maf2eaf(insomnia_exp_female_S12)
View(insomnia_exp_female_S12)
top_insomnia_exp_female_S12 <- insomnia_exp_female_S12[insomnia_exp_female_S12$isTopSNPs == 1, ]
top_insomnia_exp_female_S12 <- dplyr::rename(top_insomnia_exp_female_S12, effect_allele = Allele1)
top_insomnia_exp_female_S12 <- dplyr::rename(top_insomnia_exp_female_S12, other_allele = Allele2)
top_insomnia_exp_female_S12 <- U1_Clean_data_exp(top_insomnia_exp_female_S12, continuous = FALSE, save = FALSE)
femIVs <- U2_extract_instruments(top_insomnia_exp_female_S12,
p = 5e-08,
clump = "online",
r2 = 0.001,
kb = 10000,
max_retries = 3,
pop = "EUR")
write_parquet(femIVs, "C:/Users/hh24668/OneDrive - University of Bristol/Documents/femIVs.parquet")
library(TwoSampleMR) #version 0.6.8
library(Oneclick) #version 5.3.0
library(mrfunctions) #my own R package
library(readxl)
library(arrow)
library(data.table)
library(dplyr)
################################
# tsmr plots
################################
dat <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/finngen_R12_N14_FEMGENPAIN_dat.csv")
################################
# tsmr plots
################################
dat <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/Documents/finngen_R12_N14_FEMGENPAIN_dat.csv")
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/female/finngen_R12_N14_FEMGENPAIN.csv", header = TRUE)
library(ggplot2)
library(ggrepel)
library(grid)
library(gridExtra)
library(forestploter)
library(dplyr)
library(scales)
ci_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2")
tm <- forest_theme(
base_size = 10,  # Font size
ci_pch = 20,     # Point shape
ci_col = ci_colors,  # Custom colors for confidence intervals
ci_alpha = 0.8,      # Transparency
ci_lty = 1,          # Line type
ci_lwd = 2.3,        # Line width
ci_Theight = 0.2,    # T-shaped ends
arrow_type = "closed",
refline_gp = gpar(lwd = 1.5, lty = "dashed", col = "red"), # Reference line
summary_fill = ci_colors,  # Fill colors
summary_col = ci_colors,  # Summary colors
footnote_gp = gpar(cex = 1.1, fontface = "italic", col = "red"),
legend_value = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/Documents/finngen_R12_N14_FEMGENPAIN.csv", header = TRUE)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/Documents/finngen_R12_N14_OVARYCYST.csv", header = TRUE)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4),
theme = tm,
ci_col = ci_colors
)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 4),
ticks_at = c(0, 1, 2, 3, 4),
theme = tm,
ci_col = ci_colors
)
print(p1)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/Documents/PCOS_summary_data_19092018.csv", header = TRUE)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 4),
ticks_at = c(0, 1, 2, 3, 4),
theme = tm,
ci_col = ci_colors
)
print(p1)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
devtools::document()  # Generate documentation
devtools::build()     # Build the package
devtools::install()   # Install the package
devtools::check()
export(U1_Clean_data_exp)
