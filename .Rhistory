theme = tm,
ci_col = ci_colors
)
print(p1)
p1 <- forest(
df_clean[, c(3:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 3,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
################################
# female insomnia exposure and female reproductive outcomes
################################
femIVs <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/femIVs.parquet")
View(femIVs)
library(Oneclick)
sex_combined_IVs <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/sex_combined_IVs.parquet")
library(TwoSampleMR) #version 0.6.8
library(Oneclick) #version 5.3.0
library(mrfunctions) #my own R package
library(readxl)
library(arrow)
library(data.table)
library(dplyr)
sex_combined_IVs <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/sex_combined_IVs.parquet")
Lifetime_number_of_sexual_partners <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/2149.gwas.imputed_v3.both_sexes.parquet")
head(sex_combined_IVs)
View(sex_combined_IVs)
View(Lifetime_number_of_sexual_partners)
Outs <- U3_extract_outcomes_data(
outcome = Lifetime_number_of_sexual_partners,
exposure_iv = sex_combined_IVs,
proxies = FALSE,
max_retries = 10,
pop = "EUR",
bfile = "",
plink_bin = ""
)
View(Outs)
View(Lifetime_number_of_sexual_partners)
View(sex_combined_IVs)
View(Lifetime_number_of_sexual_partners)
dat<-U4_harmonise_data(sex_combined_IVs,Outs) %>%
U4_add_eaf() %>%
U4_check_samplesize()
View(dat)
View(Outs)
#outcome
#Lifetime_number_of_sexual_partners <- read_parquet("C:/Users/hh24668/OneDrive - University of Bristol/Documents/2149.gwas.imputed_v3.both_sexes.parquet")
write.csv(dat, "C:/Users/hh24668/OneDrive - University of Bristol/Documents/Lifetime_number_of_sexual_partners_dat.csv", row.names = FALSE)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/female/PCOS.csv", header = TRUE)
library(TwoSampleMR) #version 0.6.8
library(Oneclick) #version 5.3.0
library(mrfunctions) #my own R package
library(readxl)
library(arrow)
library(data.table)
library(dplyr)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/female/PCOS.csv", header = TRUE)
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/female/PCOS.csv", header = TRUE)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`)
df_clean <- na.omit(df)  # Remove rows with NA values
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
View(df_clean)
library(ggplot2)
library(ggrepel)
library(grid)
library(gridExtra)
library(forestploter)
library(dplyr)
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
ci_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2")
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
tm <- forest_theme(
base_size = 10,  # Font size
ci_pch = 20,     # Point shape
ci_col = ci_colors,  # Custom colors for confidence intervals
ci_alpha = 0.8,      # Transparency
ci_lty = 1,          # Line type
ci_lwd = 2.3,        # Line width
ci_Theight = 0.2,    # T-shaped ends
arrow_type = "closed",
refline_gp = gpar(lwd = 1.5, lty = "dashed", col = "red"), # Reference line
summary_fill = ci_colors,  # Fill colors
summary_col = ci_colors,  # Summary colors
footnote_gp = gpar(cex = 1.1, fontface = "italic", col = "red"),
legend_value = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
library(scales)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
res <- read.csv("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/female/PCOS.csv", header = TRUE)
df <- res[, c(
"id.exposure", "id.outcome",
"nsnp_Inverse.variance.weighted", "logor_Inverse.variance.weighted", "logor_lci95_Inverse.variance.weighted", "logor_uci95_Inverse.variance.weighted", "logOR..95..CI._Inverse.variance.weighted", "se_Inverse.variance.weighted", "pval_Inverse.variance.weighted",
"nsnp_MR.Egger", "logor_MR.Egger", "logor_lci95_MR.Egger", "logor_uci95_MR.Egger", "logOR..95..CI._MR.Egger", "se_MR.Egger", "pval_MR.Egger",
"nsnp_Weighted.median", "logor_Weighted.median", "logor_lci95_Weighted.median", "logor_uci95_Weighted.median", "logOR..95..CI._Weighted.median", "se_Weighted.median", "pval_Weighted.median",
"nsnp_Simple.mode", "logor_Simple.mode", "logor_lci95_Simple.mode", "logor_uci95_Simple.mode", "logOR..95..CI._Simple.mode", "se_Simple.mode", "pval_Simple.mode",
"nsnp_Weighted.mode", "logor_Weighted.mode", "logor_lci95_Weighted.mode", "logor_uci95_Weighted.mode", "logOR..95..CI._Weighted.mode", "se_Weighted.mode", "pval_Weighted.mode",
"nsnp_MR_PRESSO", "logor_MR_PRESSO", "logor_lci95_MR_PRESSO", "logor_uci95_MR_PRESSO", "logOR..95..CI._MR_PRESSO", "se_MR_PRESSO", "pval_MR_PRESSO",
"nSNP_cML", "logor_cML", "logor_lci95_cML", "logor_uci95_cML", "logOR..95..CI._cML", "se_cML", "Pvalue"
)]
df <- data.frame(
Exposure = c(df$id.exposure[1], rep("", 6)),
Outcome = c(df$id.outcome[1], rep("", 6)),
nSNP = c(df$nsnp_Inverse.variance.weighted[1], df$nsnp_MR.Egger[1], df$nsnp_Weighted.median[1], df$nsnp_Simple.mode[1], df$nsnp_Weighted.mode[1], df$nsnp_MR_PRESSO[1], df$nSNP_cML[1]),
OR = c(df$logor_Inverse.variance.weighted[1], df$logor_MR.Egger[1], df$logor_Weighted.median[1], df$logor_Simple.mode[1], df$logor_Weighted.mode[1], df$logor_MR_PRESSO[1], df$logor_cML[1]),
lo_ci = c(df$logor_lci95_Inverse.variance.weighted[1], df$logor_lci95_MR.Egger[1], df$logor_lci95_Weighted.median[1], df$logor_lci95_Simple.mode[1], df$logor_lci95_Weighted.mode[1], df$logor_lci95_MR_PRESSO[1], df$logor_lci95_cML[1]),
up_ci = c(df$logor_uci95_Inverse.variance.weighted[1], df$logor_uci95_MR.Egger[1], df$logor_uci95_Weighted.median[1], df$logor_uci95_Simple.mode[1], df$logor_uci95_Weighted.mode[1], df$logor_uci95_MR_PRESSO[1], df$logor_uci95_cML[1]),
`OR (95% CI)` = c(df$`logOR..95..CI._Inverse.variance.weighted`[1], df$`logOR..95..CI._MR.Egger`[1], df$`logOR..95..CI._Weighted.median`[1], df$`logOR..95..CI._Simple.mode`[1], df$`logOR..95..CI._Weighted.mode`[1], df$`logOR..95..CI._MR_PRESSO`[1], df$`logOR..95..CI._cML`[1]),
se = c(df$se_Inverse.variance.weighted[1], df$se_MR.Egger[1], df$se_Weighted.median[1], df$se_Simple.mode[1], df$se_Weighted.mode[1], df$se_MR_PRESSO[1], df$se_cML[1]),
P = c(df$pval_Inverse.variance.weighted[1], df$pval_MR.Egger[1], df$pval_Weighted.median[1], df$pval_Simple.mode[1], df$pval_Weighted.mode[1], df$pval_MR_PRESSO[1], df$Pvalue[1]),
Method = c("IVW", "MR-Egger", "Weighted Median", "Simple Mode", "Weighted Mode", "MR-PRESSO", "cML")
)
library(scales)
df <- df %>%
mutate(` ` = paste(rep(" ", 30), collapse = " ")) %>%  # close the `mutate()` properly
select(Exposure, Outcome, nSNP, Method, OR, lo_ci, up_ci, se, ` `, `OR..95..CI.`, P) %>%  # adjust the column order
rename(`OR (95% CI)` = `OR..95..CI.`) %>%
mutate(P = scientific(P, digits = 3))  # Convert P-value to scientific notation with 3 digits
df_clean <- na.omit(df)
p1 <- forest(
df_clean[, c(1:4, 9:11)],
est = df_clean$OR,
lower = df_clean$lo_ci,
upper = df_clean$up_ci,
sizes = df_clean$se,
ci_column = 5,
ref_line = 1,
xlim = c(0, 7),
ticks_at = c(0, 1, 2, 3, 4, 5, 6, 7),
theme = tm,
ci_col = ci_colors
)
print(p1)
devtools::build()
U1_maf2eaf <- function(df) {
require(dplyr)
# https://github.com/sinarueeger/GWAS.utils/blob/master/R/eaf2maf.R
# Check for MAF columns and rename if present
if (any(c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf") %in% colnames(df))) {
df <- rename_col(df, patterns = c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf"), format = "maf")
}
# Check for EAF columns and rename if present
if (any(c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency") %in% colnames(df))) {
df <- rename_col(df, patterns = c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency"), format = "eaf")
}
# If no MAF column found, return message
if (!"maf" %in% colnames(df)) {
message('No MAF column found, please check if there is an EAF column available or this will be added by U4_add_eaf function')
return(NULL)
}
# Ensure MAF column is numeric
df$maf <- as.numeric(df$maf)
# Calculate EAF from MAF
df$eaf <- 1 - df$maf
# Return the dataframe with the new EAF column, preserving the original MAF column
return(df)
}
library(TwoSampleMR) #version 0.6.8
library(Oneclick) #version 5.3.0
library(mrfunctions) #my own R package
library(readxl)
library(arrow)
library(data.table)
library(dplyr)
insomnia_exp_both_sexes_S4 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_both_sexes_S4.xlsx")
insomnia_exp_both_sexes_S4 <- U1_maf2eaf(insomnia_exp_both_sexes_S4)
U1_maf2eaf <- function(df) {
require(dplyr)
# https://github.com/sinarueeger/GWAS.utils/blob/master/R/eaf2maf.R
# Check for MAF columns and rename if present
if (any(c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf") %in% colnames(df))) {
df <- Oneclick::rename_col(df, patterns = c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf"), format = "maf")
}
# Check for EAF columns and rename if present
if (any(c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency") %in% colnames(df))) {
df <- Oneclick::rename_col(df, patterns = c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency"), format = "eaf")
}
# If no MAF column found, return message
if (!"maf" %in% colnames(df)) {
message('No MAF column found, please check if there is an EAF column available or this will be added by U4_add_eaf function')
return(NULL)
}
# Ensure MAF column is numeric
df$maf <- as.numeric(df$maf)
# Calculate EAF from MAF
df$eaf <- 1 - df$maf
# Return the dataframe with the new EAF column, preserving the original MAF column
return(df)
}
insomnia_exp_both_sexes_S4 <- U1_maf2eaf(insomnia_exp_both_sexes_S4)
U1_maf2eaf <- function(df) {
require(dplyr)
# https://github.com/sinarueeger/GWAS.utils/blob/master/R/eaf2maf.R
rename_col <- function(df ,
patterns ,
format ){
B <- colnames( df )
for(i in 1:length(B)){
col <- B[i]
for( y in 1:length(patterns) ){
if( tolower(patterns[y]) == tolower(B[i])){
if(!B[i]==format){cat("将",B[i],"替换为", format,"\n")}
B[i] <- format
}
}
}
colnames( df ) <-  B
if(length( unique(colnames(df) ) ) != length(colnames( df))){
stop(paste(format,"列名重复，请用`help(U1_Clean_data)`查看说明文档，只提供一个!\n"), call. = FALSE)
}
return(df)
}
if(is.data.frame(df)){ df = as.data.frame(df) }
# Check for MAF columns and rename if present
if (any(c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf") %in% colnames(df))) {
df <- rename_col(df, patterns = c("MinorAlleleFrequency", "minor_allele_frequency", "MAF", "Freq", "freq", "alt_freq", 'freq_minor', 'Freq_Minor_Allele', "maf"), format = "maf")
}
# Check for EAF columns and rename if present
if (any(c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency") %in% colnames(df))) {
df <- rename_col(df, patterns = c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency"), format = "eaf")
}
# If no MAF column found, return message
if (!"maf" %in% colnames(df)) {
message('No MAF column found, please check if there is an EAF column available or this will be added by U4_add_eaf function')
return(NULL)
}
# Ensure MAF column is numeric
df$maf <- as.numeric(df$maf)
# Calculate EAF from MAF
df$eaf <- 1 - df$maf
# Return the dataframe with the new EAF column, preserving the original MAF column
return(df)
}
insomnia_exp_both_sexes_S4 <- U1_maf2eaf(insomnia_exp_both_sexes_S4)
View(insomnia_exp_both_sexes_S4)
top_insomnia_exp_both_sexes_S4 <- insomnia_exp_both_sexes_S4[insomnia_exp_both_sexes_S4$isTopSNPs == 1, ]
top_insomnia_exp_both_sexes_S4 <- dplyr::rename(top_insomnia_exp_both_sexes_S4, effect_allele = Allele1)
top_insomnia_exp_both_sexes_S4 <- dplyr::rename(top_insomnia_exp_both_sexes_S4, other_allele = Allele2)
View(top_insomnia_exp_both_sexes_S4)
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
remotes::install_github("gwendyun/mrfunctions",force = TRUE)
detach("package:mrfunctions", unload = TRUE)
remotes::install_github("gwendyun/mrfunctions",force = TRUE)
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data_exp(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
library(mrfunctions)
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data_exp(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data_exp(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
U1_Clean_data_exp <- function(df, continuous = FALSE, save = FALSE) {
if (nrow(df) <= 30) {
warning('Too few SNPs, may not be suitable for exp analysis')
}
df <- Clean_data(df = df, continuous = continuous)
class(df) <- c("df", class(df))
if (save) {
arrow::write_parquet(df, paste0(df$id[1], ".parquet"), compression = "gzip")
}
return(df)
}
Clean_data = function(df,continuous=FALSE){
rename_col <- function(df ,
patterns ,
format ){
B <- colnames( df )
for(i in 1:length(B)){
col <- B[i]
for( y in 1:length(patterns) ){
if( tolower(patterns[y]) == tolower(B[i])){
if (!B[i] == format) {
cat("Replacing", B[i], "with", format, "\n")
}
B[i] <- format
}
}
}
colnames(df) <- B
if (length(unique(colnames(df))) != length(colnames(df))) {
stop(paste(format, "column name is duplicated, please use `help(U1_Clean_data)` to check the documentation and provide only one!"), call. = FALSE)
}
return(df)
}
# dataframe
if(is.data.frame(df)){ df = as.data.frame(df) }
df <- rename_col(df, patterns = c("snp", "rsid", "rsids", "snpid", "rnpid", "rs", "variant_id"), format = "SNP")
df <- rename_col(df, patterns = c("chr", "#chrom", "chromosome"), format = "chr")
df <- rename_col(df, patterns = c("pos", "position", "base_pair_location"), format = "pos")
df <- rename_col(df, patterns = c("effect_allele", "ea", "alt", "alts", "Tested_Allele", "Alternate.Allele"), format = "effect_allele")
df <- rename_col(df, patterns = c("other_allele", "oa", "ref", "Reference.Allele", "NEA"), format = "other_allele")
df <- rename_col(df, patterns = c("beta", "b", "Effect", "LogOR"), format = "beta")
df <- rename_col(df, patterns = c("se", "sebeta", "standard error", "standard_error", "StdErr", "StdErrLogOR"), format = "se")
df <- rename_col(df, patterns = c("pval", "p", "p_value", "pvalue"), format = "pval")
df <- rename_col(df, patterns = c("z", "zscore"), format = "z")
df <- rename_col(df, patterns = c("eaf", "FREQ", "af_alt", "FREQ1", "effect_allele_frequency", "Freq_Tested_Allele", "Alternate.Allele.Frequency"), format = "eaf")
df <- rename_col(df, patterns = c("samplesize", "n", "sample_size", "TotalSampleSize"), format = "samplesize")
df <- rename_col(df, patterns = c("ncase", "n_cases", "ncases", "n_case"), format = "ncase")
df <- rename_col(df, patterns = c("ncontrol", "n_controls", "ncontrols", "n_control", "Ntotal"), format = "ncontrol")
df <- rename_col(df, patterns = c("or", "odds ratio", "odds_ratio"), format = "or")
df <- rename_col(df, patterns = c("gene", "nearest_genes"), format = "gene")
df <- rename_col(df, patterns = c("info"), format = "info")
message('usually. effect_allele = Allele1; other_allele = Allele2. but please check manually. and use df <- dplyr::rename(df, other_allele = Allele2)')
if (!"SNP" %in% colnames(df)) {
warning("SNP is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide an SNP column! \n")
} else {
ratio <- sum(grepl("^rs\\d+$", df$SNP)) / length(df$SNP)
if (ratio < 0.5) {
warning("A large number or all of the SNPs are not in the format rs123456, please use", cli::style_underline(cli::col_br_red("help(U1_add_SNP)")), "to check the documentation and match the SNP column! \n")
}
}
if (!"chr" %in% colnames(df) | !"pos" %in% colnames(df)) {
cat("No chr or pos, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide a chr or pos column! Or use", cli::style_underline(cli::col_br_red("help(U1_add_chr_pos)")), "to check the documentation and match chr and pos. If not available, it will not affect the analysis.\n")
}
if ("pos" %in% colnames(df)) {
df$pos <- as.numeric(df$pos)
}
# Beta part
if ("or" %in% colnames(df) & !"beta" %in% colnames(df)) {
cat("No beta provided, calculating from or, formula: beta = log(or)\n")
df$beta <- as.numeric(log(df$or))
} else if ("se" %in% colnames(df) & "pval" %in% colnames(df) & !"beta" %in% colnames(df)) {
cat("No beta provided, calculating from se and pval, formula: beta = se * sqrt(qchisq(pval, 1, lower.tail = F))\n")
df$beta <- as.numeric(df$se * sqrt(qchisq(df$pval, 1, lower.tail = FALSE)))
} else if (!"beta" %in% colnames(df)) {
warning("Beta is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide a beta column! \n")
}
# SE part
if ("beta" %in% colnames(df) & "pval" %in% colnames(df) & !"se" %in% colnames(df)) {
cat("No se provided, calculating from beta and pval, formula: se = beta / sqrt(qchisq(pval, 1, lower.tail = F))\n")
df$se <- as.numeric(df$beta / sqrt(qchisq(df$pval, 1, lower.tail = FALSE)))
} else if (!"se" %in% colnames(df)) {
warning("SE is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide an se column! \n")
}
if (!"effect_allele" %in% colnames(df)) {
warning("Effect allele is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide an effect_allele column! \n")
}
if (!"other_allele" %in% colnames(df)) {
warning("Other allele is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide an other_allele column! \n")
}
if ("pval" %in% colnames(df)) {
if (!is.numeric(df$pval)) {
cat("Converting pval to numeric\n")
df$pval <- as.numeric(df$pval)
}
} else if ("beta" %in% colnames(df) & "se" %in% colnames(df) & !"pval" %in% colnames(df)) {
cat("No pval provided, calculating from beta and se, formula: pval <- 2 * pnorm(abs(beta / se), lower.tail = FALSE)\n")
df$beta <- as.numeric(df$beta)
df$se <- as.numeric(df$se)
df$pval <- 2 * pnorm(abs(df$beta / df$se), lower.tail = FALSE)
df$pval <- as.numeric(df$pval)
} else if ("z" %in% colnames(df) & !"pval" %in% colnames(df)) {
cat("No pval provided, calculating from z, formula: pval <- 2 * pnorm(abs(z), lower.tail = FALSE)\n")
df$z <- as.numeric(df$z)
df$pval <- 2 * pnorm(abs(df$z), lower.tail = FALSE)
df$pval <- as.numeric(df$pval)
} else if (!"pval" %in% colnames(df)) {
warning("Pval is very important, please use", cli::style_underline(cli::col_br_red("help(U1_Clean_data)")), "to check the documentation and provide a pval column! \n")
}
if (!"Phenotype" %in% colnames(df)) {
df$Phenotype <- readline("Enter the phenotype name, e.g., Body Mass Index, and press Enter:")
}
if (!"id" %in% colnames(df)) {
df$id <- readline("Create a unique ID for your phenotype, e.g., Oneclick-0001, and press Enter:")
}
if (!continuous) {
if (!"ncase" %in% colnames(df) | !"ncontrol" %in% colnames(df)) {
YES_NO <- yesno::yesno2("Is it case-control data, e.g., disease with cases and controls? Yes select 1, No select 2", yes = "Yes", no = "No")
if (!"ncase" %in% colnames(df) & YES_NO) {
df$ncase <- as.numeric(readline("Enter the number of cases, e.g., 4560, and press Enter:"))
}
if (!"ncontrol" %in% colnames(df) & YES_NO) {
df$ncontrol <- as.numeric(readline("Enter the number of controls, e.g., 78200, and press Enter:"))
}
}
}
if ("ncase" %in% colnames(df) & "ncontrol" %in% colnames(df) & !"samplesize" %in% colnames(df)) {
cat("No samplesize provided, calculating from ncase and ncontrol, formula: samplesize <- ncase + ncontrol\n")
df$samplesize <- as.numeric(df$ncase + df$ncontrol)
} else if (!"samplesize" %in% colnames(df)) {
df$samplesize <- as.numeric(readline("Enter the total sample size, e.g., 478000, and press Enter:"))
}
return(df)
}
prepare_Munge <- function() {
options(timeout = 1200)
if (!require("BiocManager")) install.packages("BiocManager")
# https://www.bioconductor.org/about/mirrors/
options(BioC_mirror = "https://mirrors.westlake.edu.cn/bioconductor")
if (!require("MungeSumstats")) {
BiocManager::install("MungeSumstats")
}
# GRCh38 reference group
if (!require("SNPlocs.Hsapiens.dbSNP155.GRCh38")) {
message("Installing SNPlocs.Hsapiens.dbSNP155.GRCh38 package for the first time may take a while")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh38")
}
if (!require("BSgenome.Hsapiens.NCBI.GRCh38")) {
message("Installing BSgenome.Hsapiens.NCBI.GRCh38 package for the first time may take a while")
BiocManager::install("BSgenome.Hsapiens.NCBI.GRCh38")
}
# GRCh37 reference group
if (!require("SNPlocs.Hsapiens.dbSNP155.GRCh37")) {
message("Installing SNPlocs.Hsapiens.dbSNP155.GRCh37 package for the first time may take a while")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
}
if (!require("BSgenome.Hsapiens.1000genomes.hs37d5")) {
message("Installing BSgenome.Hsapiens.1000genomes.hs37d5 package for the first time may take a while")
BiocManager::install("BSgenome.Hsapiens.1000genomes.hs37d5")
}
options(timeout = 60)
library(MungeSumstats)
}
top_insomnia_exp_both_sexes_S4 <- U1_Clean_data_exp(top_insomnia_exp_both_sexes_S4, continuous = FALSE, save = FALSE)
View(top_insomnia_exp_both_sexes_S4)
insomnia_exp_both_sexes_S4 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_both_sexes_S4.xlsx")
library(TwoSampleMR) #version 0.6.8
library(Oneclick) #version 5.3.0
library(mrfunctions) #my own R package
library(readxl)
library(arrow)
library(data.table)
library(dplyr)
insomnia_exp_both_sexes_S4 <- read_excel("C:/Users/hh24668/OneDrive - University of Bristol/projects/sleep_femrepro_association/insomnia_exp_both_sexes_S4.xlsx")
insomnia_exp_both_sexes_S4 <- U1_maf2eaf(insomnia_exp_both_sexes_S4)
remove.packages("mrfunctions")
remotes::install_github("gwendyun/mrfunctions",force = TRUE)
